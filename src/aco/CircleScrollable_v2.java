/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aco;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author bishu
 */
public class CircleScrollable_v2 extends javax.swing.JFrame {

    /**
     * Creates new form test
     */
    public CircleScrollable_v2(CirclePane_v2 CP) {
        initComponents(CP);
        CP.setPreferredSize(new Dimension(1000, CP.n * 60));
        ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\icons\\folder.jpg");
        setIconImage(icon.getImage());
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        setTitle("CFG");
        this.setVisible(true);
        /*for (int i = 0; i < CP.n; i++) {
         System.out.println("");
         for (int j = 0; j < CP.n; j++) {
         System.out.print(CP.m[i][j] + " ");

         }
         } */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(CirclePane_v2 CirclePanel) {
        JScrollPane scroll = CirclePanel.scroll;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 1006, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </jeditor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            System.err.println(ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CircleScrollable_v2(new CirclePane_v2()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}

class CirclePane_v2 extends JPanel {

    JScrollPane scroll;
    private javax.swing.JButton zoomin = new javax.swing.JButton();
    private javax.swing.JButton zoomout = new javax.swing.JButton();
    private int zoom = 100;

    public class coor {

        int x, y, n, mx, my;

        public coor() {
            x = y = n = my = 0;
            mx = getWidth();
        }
    }

    public CirclePane_v2() {
        setBackground(Color.white);
        setPreferredSize(new Dimension(1000, 2500));
        initComponents();
        scroll = new javax.swing.JScrollPane(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        zoomin = new javax.swing.JButton();
        zoomout = new javax.swing.JButton();

        zoomin.setText("+");
        zoomin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoominMouseClicked(evt);
            }
        });

        zoomout.setText("-");
        zoomout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoomoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(zoomin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomout))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(zoomin)
                                .addComponent(zoomout))
                )
        );
    }// </editor-fold>                        

    private void zoomoutMouseClicked(java.awt.event.MouseEvent evt) {
        /* TODO add your handling code here:
         Dimension d = new Dimension(this.getParent().getWidth() - 100, this.getParent().getHeight()-100);
         this.getParent().setSize(d);
         this.setPreferredSize(d);
         this.setMaximumSize(d);
         this.repaint();
         System.out.println("Zoom-out Dimension: " + this.getParent().getWidth() + " x " + this.getParent().getHeight());
         */
        //this.scroll.setSize(this.scroll.getWidth() - 100, this.scroll.getHeight() - 100); //decrease size of scroll pane
        //this.setMaximumSize(new Dimension(this.getWidth() - 100, this.getHeight() - 100));
        setPreferredSize(new Dimension(getWidth() - 100, getHeight() - 100));
        zoom = -100;
    }

    private void zoominMouseClicked(java.awt.event.MouseEvent evt) {
        /* TODO add your handling code here:
         Dimension d = new Dimension(this.getParent().getWidth() + 100, this.getParent().getHeight()+100);
         this.getParent().setSize(d);
         this.setPreferredSize(d);
         this.setMaximumSize(d);
         System.out.println("Zoom-in Dimension: " + this.getParent().getWidth() + " x " + this.getParent().getHeight());
         */
        //this.scroll.setSize(this.scroll.getWidth() + 100, this.scroll.getHeight() + 100); //increase size of scroll pane
        //this.setMaximumSize(new Dimension(this.getWidth() + 100, this.getHeight() + 100));
        setPreferredSize(new Dimension(getWidth() + 100, getHeight() + 100));
        zoom = 100;
    }

    public int m[][] = new int[100][100], n, i = 1, f[], j, k;
    public coor c[];
    public String pr = "";

    public String inc() {
        String s = "";
        s += k;
        k++;
        return s;
    }

    public String inc2(int J) {
        String s = "";
        s += J;
        return s;
    }

    public void drawCircle(Graphics g, int x, int y, int r, String s) {
        if (s.length() == 1) {
            g.drawString(s, x - 3, y + 4);
        } else {
            g.drawString(s, x - 6, y + 4);
        }
        g.drawOval(x - r, y - r, r * 2, r * 2);
    }

    public void drawArrow(Graphics g1, int x, int y, int xx, int yy) {
        Graphics2D g = (Graphics2D) g1.create();
        double dx = xx - x, dy = yy - y;
        double a = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x, y);
        at.concatenate(AffineTransform.getRotateInstance(a));
        g.transform(at);
        g.drawLine(0, 0, len, 0);
        g.fillPolygon(new int[]{len, len - 4, len - 4, len},
                new int[]{0, -4, 4, 0}, 4);
    }

    @Override
    public void paintComponent(Graphics g) {
        //Graphics2D g = (Graphics2D) g1.create();
        //g.scale(zoom, zoom);
        setSize(new Dimension(getWidth() + zoom, getHeight() + zoom));
        validate();
        super.paintComponent(g);
        int x = getWidth() / 2; //System.out.println("x="+x+" n="+n);
        //drawCircle(g, x, 30, 13, "0"); //center(x,30) r=13
        //drawArrow(g, x, 43, x, 100 - 13);
        //drawCircle(g, x, 100, 13, "1");
        //func2(g, 0, 1, 0, getWidth(), 30);
        make(g);
        //func(g, 0, 1, 0, getWidth(), 30);
        //repaint();
        //drawCircle(g, x, 100, 13, inc());
        //g.drawLine(x, 30+13, x, 100-13);
        //int w = getWidth(), h = getHeight(), scale=1;
        //g.translate(w/2, h/2);
        //g.scale(scale, scale);
        //g.translate(-w/2, -h/2);
        //this.setSize(new Dimension(w*scale, h*scale));
    }

    public void func(Graphics g, int I, int J, int xst, int xend, int y) {
        try {
            //super.paintComponent(g);
            //int d: 0=mid, 1=right, 2=left.
            int sm = 0, mid = (xend - xst) / 2;

            if (J == n - 1) {
                drawCircle(g, xst + mid, y, 13, inc2(J));
                drawCircle(g, xst + mid, y + 60, 13, inc2(n));
                drawArrow(g, xst + mid + 3, y + 13, xst + mid + 3, y + 47);
                return;
            }

            for (i = 0; i < n; i++) {
                sm += m[J][i];
            }
            //System.out.print("(i, j)= ("+I+", "+J+")  (xst, mid, xend, y)=("+xst+", "+mid+", "+xend+", "+y+") sm="+sm);
            if (sm == 0) {
                return;
            }
            //System.out.println(" circle "+J);

            drawCircle(g, xst + mid, y, 13, inc2(J));
            c[J].x = xst + mid;

            switch (sm) {
                case 1:
                    j = getIndex(J, 1);// System.out.println(" circle "+j);//": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    // drawCircle(g, mid, y, 13, inc2(j));
                    if (j < J) { //System.out.println(J+" "+j);
                        drawArrow(g, c[J].x - 3, c[J].y - 13, c[j].x - 13, c[j].y + 5);
                    } else {
                        drawArrow(g, xst + mid + 3, y + 13, xst + mid + 3, y + 60 - 13);
                        func(g, J, j, xst, xend, y + 60);
                    }
                    break;
                case 2:
                    drawArrow(g, xst + mid + 3, y + 13, xst + (mid / 2) + 3, y + 60 - 13);
                    j = getIndex(J, 1);// System.out.println("Circle "+j);//+": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    //drawCircle(g, mid, y, 13, inc2(j));
                    func(g, J, j, xst, xst + mid, y + 60);

                    drawArrow(g, xst + mid + 3, y + 13, xend - (mid / 2) + 3, y + 60 - 13);
                    j = getIndex(J, 2); //System.out.println("Circle "+j);//+": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    //drawCircle(g, mid, y, 13, inc2(j));
                    func(g, J, j, xst + mid, xend, y + 60);
                    break;
            }
            if (sm > 2) {
                int xm = (xend - xst) / sm;
                for (int v = 1; v <= sm; v++) {
                    drawArrow(g, xst + mid + 3, y + 13, xst + (v - 1) * xm + (xm / 2) + 3, y + 60 - 13);
                    j = getIndex(J, v); //System.out.println("j="+j);
                    drawCircle(g, xst + (v - 1) * xm + (xm / 2) + 3, y + 60, 13, inc2(j));
                    drawArrow(g, xst + (v - 1) * xm + (xm / 2) + 3, y + 83, xst + mid + (v - 2), y + 140 - 13);
                }

                j = getIndex(j, 1);
                func(g, J, j, xst, xend, y + 140);
            }

            return;
        } catch (Exception e) {
            System.out.println("in func" + e);
        }
    }

    public int getIndex(int I, int s) {
        int sm = 0;
        for (int a = 0; a < n; a++) {
            sm += m[I][a];
            if (m[I][a] == 1 && sm == s) {
                return a;
            }
        }
        return 0;
    }

    public void make(Graphics g) {
        int i, j, x = getWidth() / 2, l, k, temp[], y1, y2;
        c = new coor[n];
        temp = new int[n];
        //f= new int[n];
        c[0] = new coor();
        c[0].x = x;
        c[0].y = 60;
        //f[0]=1;
        for (i = 1; i < n; i++) {
            c[i] = new coor();
            c[i].x = x;
            c[i].n = i;
            // f[i]=0;
            //for(j=0; j<n; j++)
            //f[i]+=m[i][j];
        }
        func2(g, 0, 1, 0, getWidth(), 30);
        for (i = 1; i < n; i++) {
            c[i].x = (c[i].mx + c[i].my) / 2;
            /*  for (j = 0; j < n; j++) {
             if (m[i][j] == 1 && c[j].y == 0) {
             c[j].y = c[i].y + 60;
             }
             }*/
        }/*

         for (i = 0; i < n; i++) {
         l = 0;
         for (j = 0; j < n; j++) {
         if (c[j].y == c[i].y) {
         temp[l++] = j;
         }
         }
         if (l > 1) {
         Arrays.sort(temp);
         k = (int) (getWidth() / l);
         //System.err.println("k = " + k);
         y1 = 0;
         y2 = x;
         for (j = 0; j < l; j++) {
         if (j % 2 == 0) {
         c[temp[j]].x = y1 + k;
         y1 += k;
         } else {
         c[temp[j]].x = y2 + k;
         y2 += k;
         }
         //System.out.println(c[j].n + ": " + c[j].x + ", " + c[j].y);
         }
         }
         } */

        /*func2(g, 1, 0, getWidth());
         System.out.println("\nActual:");
         for(i=0; i<n; i++)
         { System.out.println(c[i].n+": "+c[i].x+", "+c[i].y);
         }
         /*        
         coor temp= new coor();
         for(i=0; i<n; i++)
         { for(j=0; j<n; j++)
         {
         if(c[i].y<c[j].y)
         {   temp=c[i]; c[i]=c[j];
         c[j]=temp;              
         }
         }
         }
         for(i=0; i<n; i++)
         { for(j=0; j<n; j++)
         {
         if(c[i].y==c[j].y && c[i].n<c[j].n)
         {   temp=c[i]; c[i]=c[j];
         c[j]=temp;              
         }
         }
         }
        
         for(i=0; i<n-1; i++)
         {  xm=x/f[i]; y=1;
         for(j=0; j<n; j++)
         {   if(m[i][j]==1)
         { c[j].x=y*xm; y+=2;  }
         }
         }*/
        for (i = 1; i < n; i++) {
            for (j = 1; j < n; j++) {
                if (m[i][j] == 1) {
                    drawArrow(g, c[i].x, c[i].y + 13, c[j].x, c[j].y - 13);
                }
            }
            drawCircle(g, c[i].x, c[i].y, 13, inc2(c[i].n));
            //System.out.println(c[i].n+": "+c[i].x+", "+c[i].y);
        }
    }

    public void func2(Graphics g, int I, int J, int xst, int xend, int y) {
        try {
            //super.paintComponent(g);
            //int d: 0=mid, 1=right, 2=left.
            int sm = 0, mid = (xend - xst) / 2;

            if (J == n - 1) {
                if (c[J].mx > (xst + mid)) {
                    c[J].mx = xst + mid;
                }
                if (c[J].my < (xst + mid)) {
                    c[J].my = xst + mid;
                }
                if (c[J].y < y) {
                    c[J].y = y;
                }
                return;
            }

            for (i = 0; i < n; i++) {
                sm += m[J][i];
            }
            //System.out.print("(i, j)= ("+I+", "+J+")  (xst, mid, xend, y)=("+xst+", "+mid+", "+xend+", "+y+") sm="+sm);
            if (sm == 0) {
                return;
            }
            //System.out.println(" circle "+J);

            if (c[J].mx > (xst + mid)) {
                c[J].mx = xst + mid;
            }
            if (c[J].my < (xst + mid)) {
                c[J].my = xst + mid;
            }
            if (c[J].y < y) {
                c[J].y = y;
            }

            switch (sm) {
                case 1:
                    j = getIndex(J, 1);// System.out.println(" circle "+j);//": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    // drawCircle(g, mid, y, 13, inc2(j));
                    if (j < J) { //System.out.println(J+" "+j);
                        //drawArrow(g, c[J].x - 3, c[J].y - 13, c[j].x - 13, c[j].y + 5);
                    } else {
                        //drawArrow(g, xst + mid + 3, y + 13, xst + mid + 3, y + 60 - 13);
                        func2(g, J, j, xst, xend, y + 60);
                    }
                    break;
                case 2:
                    //drawArrow(g, xst + mid + 3, y + 13, xst + (mid / 2) + 3, y + 60 - 13);
                    j = getIndex(J, 1);// System.out.println("Circle "+j);//+": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    //drawCircle(g, mid, y, 13, inc2(j));
                    func2(g, J, j, xst, xst + mid, y + 60);

                    //drawArrow(g, xst + mid + 3, y + 13, xend - (mid / 2) + 3, y + 60 - 13);
                    j = getIndex(J, 2); //System.out.println("Circle "+j);//+": (x, y)=("+mid+", "+y+") (i, j)=("+I+", "+J+")");
                    //drawCircle(g, mid, y, 13, inc2(j));
                    func2(g, J, j, xst + mid, xend, y + 60);
                    break;
            }
            if (sm > 2) {
                int xm = (xend - xst) / sm;
                for (int v = 1; v <= sm; v++) {
                    //drawArrow(g, xst + mid + 3, y + 13, xst + (v - 1) * xm + (xm / 2) + 3, y + 60 - 13);
                    j = getIndex(J, v); //System.out.println("j="+j);
                    //drawCircle(g, xst + (v - 1) * xm + (xm / 2) + 3, y + 60, 13, inc2(j));

                    if (c[J].mx > (xst + (v - 1) * xm + (xm / 2) + 3)) {
                        c[J].mx = xst + (v - 1) * xm + (xm / 2) + 3;
                    }
                    if (c[J].my < (xst + (v - 1) * xm + (xm / 2) + 3)) {
                        c[J].my = xst + (v - 1) * xm + (xm / 2) + 3;
                    }
                    if (c[J].y < (y + 60)) {
                        c[J].y = y + 60;
                    }

                    func2(g, J, j, xst + (v - 1) * xm, xst + v * xm, y + 120);
                    //drawArrow(g, xst + (v - 1) * xm + (xm / 2) + 3, y + 83, xst + mid + (v - 2), y + 140 - 13);
                }
                //j = getIndex(j, 1);
                //func2(g, J, j, xst, xend, y + 120);
            }

            return;
        } catch (Exception e) {
            System.out.println("in func" + e);
        }
    }

}